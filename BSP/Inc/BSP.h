#ifndef BSP_CONF_H
#define BSP_CONF_H

/**
 * Common features / necessities used on the BSP layer of
 * Embedded Sharepoint
 * 
 * Has a struct used for 
 */

#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_rcc.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_i2c.h"
#include "stm32f4xx_hal_spi.h"
#include "stm32f4xx_hal_uart.h"


//for pin in pin2periph:
//    if pin.af == i2c_shit:
//        i2c_init(pin)

// 

// Possible pins to refer to.
typedef enum {
    BSP_GPIO_PA0, BSP_GPIO_PA1, BSP_GPIO_PA2, BSP_GPIO_PA3, BSP_GPIO_PA4,
    BSP_GPIO_PA5, BSP_GPIO_PA6, BSP_GPIO_PA7, BSP_GPIO_PA8, BSP_GPIO_PA9,
    BSP_GPIO_PA10, BSP_GPIO_PA11, BSP_GPIO_PA12, BSP_GPIO_PA13, BSP_GPIO_PA14,
    BSP_GPIO_PA15,

    BSP_GPIO_PB0, BSP_GPIO_PB1, BSP_GPIO_PB2, BSP_GPIO_PB3, BSP_GPIO_PB4,
    BSP_GPIO_PB5, BSP_GPIO_PB6, BSP_GPIO_PB7, BSP_GPIO_PB8, BSP_GPIO_PB9,
    BSP_GPIO_PB10, BSP_GPIO_PB12, BSP_GPIO_PB13, BSP_GPIO_PB14, BSP_GPIO_PB15,

    BSP_GPIO_PC0, BSP_GPIO_PC1, BSP_GPIO_PC2, BSP_GPIO_PC3, BSP_GPIO_PC4,
    BSP_GPIO_PC5, BSP_GPIO_PC6, BSP_GPIO_PC7, BSP_GPIO_PC8, BSP_GPIO_PC9, 
    BSP_GPIO_PC10, BSP_GPIO_PC11, BSP_GPIO_PC12, BSP_GPIO_PC13, // PC14/15 reserved for xtal

    BSP_GPIO_PD2,

    NUM_BSP_PINS
} BSP_PINS;

#define MAX_PIN_AF 8

// https://www.st.com/resource/en/datasheet/stm32f413cg.pdf page 67
static const uint8_t VALID_AF_MAP[NUM_BSP_PINS][MAX_PIN_AF] = {
    [BSP_GPIO_PA0] = {GPIO_AF1_TIM2, GPIO_AF2_TIM5, GPIO_AF3_TIM8, GPIO_AF7_USART2, GPIO_AF8_UART4},
    [BSP_GPIO_PA1] = {GPIO_AF1_TIM2, GPIO_AF2_TIM5, GPIO_AF5_SPI4, GPIO_AF7_USART2, GPIO_AF8_UART4},
    [BSP_GPIO_PA2] = {GPIO_AF1_TIM2, GPIO_AF2_TIM5, GPIO_AF3_TIM9, GPIO_AF7_USART2, NULL}, // we dont use i2s or fsmc
    [BSP_GPIO_PA3] = {GPIO_AF1_TIM2, GPIO_AF2_TIM5, GPIO_AF3_TIM9, GPIO_AF7_USART2, NULL}, // same as above
    [BSP_GPIO_PA4] = {GPIO_AF5_SPI1, GPIO_AF5_SPI3, GPIO_AF6_SPI3, GPIO_AF7_USART2, NULL},
    [BSP_GPIO_PA5] = {GPIO_AF1_TIM2, GPIO_AF3_TIM8, GPIO_AF5_SPI1, NULL, NULL},
    [BSP_GPIO_PA6] = {GPIO_AF1_TIM1, GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF5_SPI1, GPIO_AF9_TIM13},
    [BSP_GPIO_PA7] = {GPIO_AF1_TIM1, GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF5_SPI1, GPIO_AF9_TIM14},
    [BSP_GPIO_PA8] = {GPIO_AF1_TIM1, GPIO_AF4_I2C3, GPIO_AF7_USART1, GPIO_AF8_UART7, GPIO_AF11_CAN3}, // won't be using MCO
    [BSP_GPIO_PA9] = {GPIO_AF1_TIM1, GPIO_AF4_I2C3, GPIO_AF5_SPI2, GPIO_AF7_USART1, NULL},
    [BSP_GPIO_PA10] = {GPIO_AF1_TIM1, GPIO_AF5_SPI2, GPIO_AF6_SPI5, GPIO_AF7_USART1, NULL},
    [BSP_GPIO_PA11] = {GPIO_AF1_TIM1, GPIO_AF5_SPI2, GPIO_AF6_SPI4, GPIO_AF7_USART1, GPIO_AF8_USART6, GPIO_AF9_CAN1, GPIO_AF11_UART4},
    [BSP_GPIO_PA12] = {GPIO_AF1_TIM1, GPIO_AF5_SPI2, GPIO_AF6_SPI5, GPIO_AF7_USART1, GPIO_AF8_USART6, GPIO_AF9_CAN1, GPIO_AF11_UART4},
    [BSP_GPIO_PA13] = {},
    [BSP_GPIO_PA14] = {},
    [BSP_GPIO_PA15] = {GPIO_AF1_TIM2, GPIO_AF5_SPI1, GPIO_AF6_SPI3, GPIO_AF7_USART1, GPIO_AF8_UART7, GPIO_AF11_CAN3},
    [BSP_GPIO_PB0] = {GPIO_AF1_TIM1, GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF6_SPI5},
    [BSP_GPIO_PB1] = {GPIO_AF1_TIM1, GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF6_SPI5},
    [BSP_GPIO_PB2] = {},
    [BSP_GPIO_PB3] = {GPIO_AF1_TIM2, GPIO_AF5_SPI1, GPIO_AF6_SPI3, GPIO_AF7_USART1, GPIO_AF8_UART7, GPIO_AF9_I2C2, GPIO_AF11_CAN3},
    [BSP_GPIO_PB4] = {GPIO_AF2_TIM3, GPIO_AF5_SPI1, GPIO_AF6_SPI3, GPIO_AF8_UART7, GPIO_AF9_I2C3, GPIO_AF11_CAN3},
    [BSP_GPIO_PB5] = {GPIO_AF2_TIM3, GPIO_AF4_I2C1, GPIO_AF5_SPI1, GPIO_AF6_SPI3, GPIO_AF9_CAN2, GPIO_AF11_UART5},
    [BSP_GPIO_PB6] = {GPIO_AF2_TIM4, GPIO_AF4_I2C1, GPIO_AF7_USART1, GPIO_AF9_CAN2, GPIO_AF11_UART5},
    [BSP_GPIO_PB7] = {GPIO_AF2_TIM4, GPIO_AF4_I2C1, GPIO_AF7_USART1},
    [BSP_GPIO_PB8] = {GPIO_AF2_TIM4, GPIO_AF3_TIM10, GPIO_AF4_I2C1, GPIO_AF6_SPI5, GPIO_AF8_CAN1, GPIO_AF9_I2C3, GPIO_AF11_UART5},
    [BSP_GPIO_PB9] = {GPIO_AF2_TIM4, GPIO_AF3_TIM11, GPIO_AF4_I2C1, GPIO_AF5_SPI2, GPIO_AF8_CAN1, GPIO_AF9_I2C2, GPIO_AF11_UART5},
    [BSP_GPIO_PB10] = {GPIO_AF1_TIM2, GPIO_AF4_I2C2, GPIO_AF5_SPI2, GPIO_AF7_USART3},
    // PB11 not on our chip
    [BSP_GPIO_PB12] = {GPIO_AF1_TIM1, GPIO_AF4_I2C2, GPIO_AF5_SPI2, GPIO_AF6_SPI4, GPIO_AF7_SPI3, GPIO_AF8_USART3, GPIO_AF9_CAN2, GPIO_AF11_UART5},
    [BSP_GPIO_PB13] = {GPIO_AF1_TIM1, GPIO_AF5_SPI2, GPIO_AF6_SPI4, GPIO_AF8_USART3, GPIO_AF9_CAN2, GPIO_AF11_UART5},
    [BSP_GPIO_PB14] = {GPIO_AF1_TIM1, GPIO_AF3_TIM8, GPIO_AF5_SPI2, GPIO_AF7_USART3, GPIO_AF9_TIM12},
    [BSP_GPIO_PB15] = {GPIO_AF1_TIM1, GPIO_AF3_TIM8, GPIO_AF5_SPI2, GPIO_AF9_TIM12},
    [BSP_GPIO_PC0] = {},
    [BSP_GPIO_PC1] = {},
    [BSP_GPIO_PC2] = {GPIO_AF5_SPI2},
    [BSP_GPIO_PC3] = {GPIO_AF5_SPI2},
    [BSP_GPIO_PC4] = {},
    [BSP_GPIO_PC5] = {GPIO_AF7_USART3},
    [BSP_GPIO_PC6] = {GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF5_SPI2, GPIO_AF8_USART6},
    [BSP_GPIO_PC7] = {GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF5_SPI2, GPIO_AF8_USART6},
    [BSP_GPIO_PC8] = {GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF8_USART6},
    [BSP_GPIO_PC9] = {GPIO_AF2_TIM3, GPIO_AF3_TIM8, GPIO_AF4_I2C3},
    [BSP_GPIO_PC10] = {GPIO_AF6_SPI3, GPIO_AF7_USART3},
    [BSP_GPIO_PC11] = {GPIO_AF6_SPI3, GPIO_AF7_USART3, GPIO_AF8_UART4},
    [BSP_GPIO_PC12] = {GPIO_AF6_SPI3, GPIO_AF7_USART3, GPIO_AF8_UART5},
    [BSP_GPIO_PC13] = {},
    [BSP_GPIO_PD2] = {GPIO_AF2_TIM3, GPIO_AF8_UART5}
};

// Determines (runtime) whether or not a pin AF mapping is valid
bool isValidPinMapping(BSP_PINS pin, uint8_t mapped_function) {
    for (uint8_t i = 0; i < MAX_PIN_AF; i++) {
        if (VALID_AF_MAP[pin][i] == mapped_function) return true;
    }
    return false; // didn't match on any of the possible AFs for that pin, so bad mapping
}

// Only print BSP configuration once
// #includes are ignored in false preprocessor statements
#ifndef CONFIGURATION_PRINTED
#define CONFIGURATION_PRINTED
#include "bsp_config.h"
#endif

// BSP-level error information and handling
typedef enum {
    BSP_OK = 0x0,
    BSP_ERROR = 0x1,
    BSP_BUSY = 0x2,
    BSP_TIMEOUT = 0x4
} BSP_Status;

// Macro for turning HAL_StatusTypeDef to our BSP error
#define CONVERT_RETURN(x) (((x) == 0x3U) ? (BSP_TIMEOUT) : (x))
// Macros for interpreting returns
#define HAS_TIMEOUT(x) ((x) & 0x4)
#define HAS_BUSY(x) ((x) & 0x2)
#define HAS_ERROR(x) ((x) & 0x1)
#define IS_OK(x) (!(HAS_TIMEOUT(x) || HAS_BUSY(x) || HAS_ERROR(x)))

#endif