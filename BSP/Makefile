##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.19.2] date: [Sat May 06 17:20:44 CDT 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# inputs
######################################
TARGET ?= $(error TARGET is not set)
PROJECT_DIR ?= $(error PROJECT_DIR is not set)
BUILD_DIR ?= $(error BUILD_DIR is not set)
MCU_TARGET ?=$(error MCU_TARGET is not set)

######################################
# building variables
######################################
# debug build
DEBUG = 1
# optimization
OPT = -Og

######################################
# STM32 Targets
######################################
# Which STM32 is in use

# Parses the series of STM32 (L4 or F4, etc)
CHIP_SERIES := $(shell echo $(MCU_TARGET) | cut -c1-7)xx

# Finds chip line, used for the the BSP directory
CHIP_LINE :=$(shell echo $(MCU_TARGET) | cut -c1-9)

# Lowercases the chip line, used for finding the startup script
CHIP_STARTUP := $(shell echo $(MCU_TARGET) | cut -c6-9 | tr '[:upper:]' '[:lower:]' | sed 's/^/stm32/' | sed 's/$$/xx/')

HAL_PATH = $(CHIP_SERIES)_HAL_Driver

#######################################
# paths
#######################################
# Build path

# Current directory is in Embedded-Sharepoint/BSP
BSP_DIR := $(CHIP_LINE)
CMSIS_DIR := ../CMSIS
FREERTOS_DIR := ../FreeRTOS-Kernel
UTIL_DIR := ../Util

######################################
# source
######################################
# C sources
C_SOURCES :=	\
$(BSP_DIR)/Src/*.c	\
$(BSP_DIR)/$(HAL_PATH)/Src/*.c	\
$(FREERTOS_DIR)/*.c	\
$(UTIL_DIR)/Src/*.c	\

# Conditionally include $(BSP_DIR)/../Inc/ based on customBSP
ifeq ($(BSPConfig), on)
    C_SOURCES += $(BSP_DIR)/../Src/*.c
endif


# Expand wildcards to get each source file individually
C_SOURCES := $(foreach path, $(C_SOURCES), $(wildcard $(path)))

# Add specific sources
C_SOURCES += $(FREERTOS_DIR)/portable/GCC/ARM_CM4F/port.c	\

# Expand wildcards if project gives more sources
ifdef PROJECT_C_SOURCES
C_SOURCES += $(foreach path, $(PROJECT_C_SOURCES), $(wildcard $(path)))
endif

# If a test file is defined, take out main.c and add in the test to sources
ifdef TEST
C_SOURCES := $(filter-out %main.c, $(C_SOURCES)) # Filter out main.c
C_SOURCES += $(wildcard $(TEST)) # Add test file
endif

# ASM sources
ASM_SOURCES =  \
$(BSP_DIR)/Src/startup_$(CHIP_STARTUP).s

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-D$(CHIP_SERIES)

# AS includes
AS_INCLUDES = 

# $(addsuffix /Inc, $(MODULES))	\
$(OS_SRC_DIRS)

# C includes
C_INCLUDES :=  \
$(BSP_DIR)/Inc/	\
$(BSP_DIR)/$(HAL_PATH)/Inc/	\
$(BSP_DIR)/$(HAL_PATH)/Inc/Legacy/	\
$(CMSIS_DIR)/Device/ST/$(CHIP_SERIES)/Include/      \
$(CMSIS_DIR)/Core/Include/	\
$(FREERTOS_DIR)/include	\
$(FREERTOS_DIR)/portable/GCC/ARM_CM4F	\
$(UTIL_DIR)/Inc/	\

# Conditionally include $(BSP_DIR)/../Inc/ based on BSPConfig
ifeq ($(BSPConfig), on)
    C_INCLUDES += $(BSP_DIR)/../Inc/
endif

# Expand wildcards if project gives more includes
ifdef PROJECT_C_INCLUDES
C_INCLUDES += $(foreach path, $(PROJECT_C_INCLUDES), $(path))
endif

# Add appropriate prefix to all includes
C_INCLUDES := $(addprefix -I, $(C_INCLUDES))

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -Wno-comment -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -Wno-comment -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = $(BSP_DIR)/GCC/$(MCU_TARGET)_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***