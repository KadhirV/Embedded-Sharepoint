##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.19.2] date: [Sat May 06 17:20:44 CDT 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target (can be passed in/changed)
######################################
TARGET ?= leader # default to leader if no target passed in

# top level directory pointer
# since BSP is in the Embedded-Sharepoint, we need to go three directories up to get to the top level
TOP_LEVEL = ../../..

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR := $(TOP_LEVEL)/Objects
OS_DIR := $(TOP_LEVEL)/RTOS/uCOS-III-STM32F4
BSP_DIR := $(TOP_LEVEL)/Embedded-Sharepoint/BSP/STM32F413
CMSIS_DIR := $(TOP_LEVEL)/Embedded-Sharepoint/CMSIS

# Top level modules (these are default, but may be passed in by top level makefile if needed)
MODULES ?= Tasks Apps Drivers	# Only assign if not already defined
MODULES := $(addprefix $(TOP_LEVEL)/, $(MODULES))

######################################
# source
######################################
# OS directory and sources
OS_SRC_DIRS :=  \
$(OS_DIR)/uCOS-III/Source	\
$(OS_DIR)/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU	\
$(OS_DIR)/uC-CPU	\
$(OS_DIR)/uC-CPU/ARM-Cortex-M4/GNU	\
$(OS_DIR)/uC-LIB	\

# $(addsuffix /Src/*.c, $(MODULES))	\
$(addsuffix /*.c, $(OS_SRC_DIRS))	

# C sources
C_SOURCES :=	\
$(BSP_DIR)/Src/*.c	\
$(BSP_DIR)/STM32F4xx_HAL_Driver/Src/*.c	\
$(TOP_DIR)/Config/Src/*.c	\

# Expand wildcards to get each source file individually
C_SOURCES := $(foreach path, $(C_SOURCES), $(wildcard $(path)))

# If a test file is defined, we want to use that as our main
ifneq ($(TEST), none)
TEST_FILE := $(TEST).c

C_SOURCES := $(filter-out $(TOP_LEVEL)/*/main.c, $(C_SOURCES)) # Filter out main.c
C_SOURCES += $(wildcard $(TOP_LEVEL)/$(TEST_FILE)) # Add test file
endif

# ASM sources
ASM_SOURCES =  \
$(BSP_DIR)/Src/startup_stm32f413xx.s 
# $(wildcard $(OS_DIR)/uC-CPU/ARM-Cortex-M4/GNU/*.s) \
$(wildcard $(OS_DIR)/uC-LIB/Ports/ARM-Cortex-M4/GNU/*.s) \
$(wildcard $(OS_DIR)/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU/*.s) 

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F413xx

# AS includes
AS_INCLUDES = 

# $(addsuffix /Inc, $(MODULES))	\
$(OS_SRC_DIRS)

# C includes
C_INCLUDES :=  \
$(TOP_LEVEL)/Config/Inc/	\
$(BSP_DIR)/../Inc/	\
$(BSP_DIR)/Inc/	\
$(BSP_DIR)/STM32F4xx_HAL_Driver/Inc/	\
$(BSP_DIR)/STM32F4xx_HAL_Driver/Inc/Legacy/	\
$(CMSIS_DIR)/Device/ST/STM32F4xx/Include/      \
$(CMSIS_DIR)/Core/Include/	\
../../Util/Inc/ \

# Add appropriate prefix to all includes
C_INCLUDES := $(addprefix -I, $(C_INCLUDES))

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = $(BSP_DIR)/GCC/STM32F413RHTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***